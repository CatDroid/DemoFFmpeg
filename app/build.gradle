apply plugin: 'com.android.application'
android {
    compileSdkVersion 21
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.tom.demo_ffmpeg"
        minSdkVersion 21
        targetSdkVersion 21

        externalNativeBuild {
            ndkBuild {
                cFlags "-D__STDC_CONSTANT_MACROS","-std=c11","-O3"
                cppFlags "-std=c++11","-Wall","-fno-exceptions","-fno-rtti","-O3"
            }
        }

        ndk {
            moduleName "demo_ffmpeg"
            stl 'gnustl_static'
            ldLibs 'android', 'OpenSLES', 'log', 'EGL', 'GLESv2', 'atomic'
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    // 使用externalNativeBuild来使Gradle连接到CMake或者ndk-build脚本(CMakelist or Android.mk)
    externalNativeBuild {
        // For ndk-build,  use ndkBuild {}
        // For CMake , use cmake {}
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }

    }
    productFlavors {
        // 覆盖defaultConfig {}的配置
        // 通过修改BuildVariants的Build Variant为 nolibFlavorsDebug/Release或者demoFlavorsDebug/Release

        libarm64Flavors {
            externalNativeBuild {
                ndkBuild {
                    // 指定该产品风格的需要的Native库
                    // 否者Gradle会把CMake或ndk-build的所有库编译和导入到该产品风格中
                    targets 'demo_ffmpeg'
                }
                ndk {
                    // 指定ABI Gradle应该编译和打包到APK中
                    abiFilters 'arm64-v8a'
                }
            }
        }

        libarmeabi7aFlavors {
            externalNativeBuild {
                ndkBuild {

                    targets 'demo_ffmpeg'
                }
                ndk {
                    abiFilters 'armeabi-v7a'
                }
            }
        }

    }
}
/*
通过Android Studio UI来连接 Gradle到外部的CMake或者ndk-build工程
1.在工程面板,选择module
2.右键菜单,Link C++ Project with Gradle
3.选择 CMake或者ndk-build

在'工程'面板Android视图 'External Build Files'
可以看到构建脚本(build scripts)for CMake or ndk-build ：

CMakeLists.txt  ->  CMake build script
Android.mk      ->  ndk-build
build.gradle    ->  Gradle how to build your app,

目前AS的InstantRun不兼容带有NativeCode的APK,AS会禁用InstantRun

通过 Build > Analyze APK 选择  app/build/outputs/apk/xxx.apk 来确认是否已经打包so库到apk

 */

dependencies {
}